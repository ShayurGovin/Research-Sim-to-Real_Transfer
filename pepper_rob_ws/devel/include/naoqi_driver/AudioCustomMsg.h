// Generated by gencpp from file naoqi_driver/AudioCustomMsg.msg
// DO NOT EDIT!


#ifndef NAOQI_DRIVER_MESSAGE_AUDIOCUSTOMMSG_H
#define NAOQI_DRIVER_MESSAGE_AUDIOCUSTOMMSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace naoqi_driver
{
template <class ContainerAllocator>
struct AudioCustomMsg_
{
  typedef AudioCustomMsg_<ContainerAllocator> Type;

  AudioCustomMsg_()
    : rearLeft()
    , rearRight()
    , frontLeft()
    , frontRight()  {
    }
  AudioCustomMsg_(const ContainerAllocator& _alloc)
    : rearLeft(_alloc)
    , rearRight(_alloc)
    , frontLeft(_alloc)
    , frontRight(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int16_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int16_t>> _rearLeft_type;
  _rearLeft_type rearLeft;

   typedef std::vector<int16_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int16_t>> _rearRight_type;
  _rearRight_type rearRight;

   typedef std::vector<int16_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int16_t>> _frontLeft_type;
  _frontLeft_type frontLeft;

   typedef std::vector<int16_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int16_t>> _frontRight_type;
  _frontRight_type frontRight;





  typedef boost::shared_ptr< ::naoqi_driver::AudioCustomMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::naoqi_driver::AudioCustomMsg_<ContainerAllocator> const> ConstPtr;

}; // struct AudioCustomMsg_

typedef ::naoqi_driver::AudioCustomMsg_<std::allocator<void> > AudioCustomMsg;

typedef boost::shared_ptr< ::naoqi_driver::AudioCustomMsg > AudioCustomMsgPtr;
typedef boost::shared_ptr< ::naoqi_driver::AudioCustomMsg const> AudioCustomMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::naoqi_driver::AudioCustomMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::naoqi_driver::AudioCustomMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::naoqi_driver::AudioCustomMsg_<ContainerAllocator1> & lhs, const ::naoqi_driver::AudioCustomMsg_<ContainerAllocator2> & rhs)
{
  return lhs.rearLeft == rhs.rearLeft &&
    lhs.rearRight == rhs.rearRight &&
    lhs.frontLeft == rhs.frontLeft &&
    lhs.frontRight == rhs.frontRight;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::naoqi_driver::AudioCustomMsg_<ContainerAllocator1> & lhs, const ::naoqi_driver::AudioCustomMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace naoqi_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::naoqi_driver::AudioCustomMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::naoqi_driver::AudioCustomMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::naoqi_driver::AudioCustomMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::naoqi_driver::AudioCustomMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::naoqi_driver::AudioCustomMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::naoqi_driver::AudioCustomMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::naoqi_driver::AudioCustomMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bcac904b0030b6d70386338d161f4882";
  }

  static const char* value(const ::naoqi_driver::AudioCustomMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbcac904b0030b6d7ULL;
  static const uint64_t static_value2 = 0x0386338d161f4882ULL;
};

template<class ContainerAllocator>
struct DataType< ::naoqi_driver::AudioCustomMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "naoqi_driver/AudioCustomMsg";
  }

  static const char* value(const ::naoqi_driver::AudioCustomMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::naoqi_driver::AudioCustomMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# AudioCustomMsg.msg\n"
"int16[] rearLeft\n"
"int16[] rearRight\n"
"int16[] frontLeft\n"
"int16[] frontRight\n"
;
  }

  static const char* value(const ::naoqi_driver::AudioCustomMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::naoqi_driver::AudioCustomMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.rearLeft);
      stream.next(m.rearRight);
      stream.next(m.frontLeft);
      stream.next(m.frontRight);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AudioCustomMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::naoqi_driver::AudioCustomMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::naoqi_driver::AudioCustomMsg_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "rearLeft: ";
    if (v.rearLeft.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.rearLeft.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<int16_t>::stream(s, true ? std::string() : indent + "    ", v.rearLeft[i]);
    }
    if (v.rearLeft.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "rearRight: ";
    if (v.rearRight.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.rearRight.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<int16_t>::stream(s, true ? std::string() : indent + "    ", v.rearRight[i]);
    }
    if (v.rearRight.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "frontLeft: ";
    if (v.frontLeft.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.frontLeft.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<int16_t>::stream(s, true ? std::string() : indent + "    ", v.frontLeft[i]);
    }
    if (v.frontLeft.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "frontRight: ";
    if (v.frontRight.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.frontRight.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<int16_t>::stream(s, true ? std::string() : indent + "    ", v.frontRight[i]);
    }
    if (v.frontRight.empty() || true)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // NAOQI_DRIVER_MESSAGE_AUDIOCUSTOMMSG_H
